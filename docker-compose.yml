services:
  app:
    container_name: alysia-backend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '${APP_PORT}:${APP_PORT}'
    environment:
      - APP_ENV=${APP_ENV:-development}
      - APP_PORT=${APP_PORT}
      - API_PREFIX=${API_PREFIX}
      - DB_HOST=pgsqldb
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_SYNCHRONIZE=${DB_SYNCHRONIZE}
      - DB_LOGGING=${DB_LOGGING}
      - DB_SSL=${DB_SSL}
      - DB_SCHEMA=${DB_SCHEMA}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - DEFAULT_ADMIN_USER_PASSWORD=${DEFAULT_ADMIN_USER_PASSWORD}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - pgsqldb
    command: sh -c "if [ \"$APP_ENV\" = 'production' ]; then pnpm build && pnpm start; else pnpm dev; fi"
    networks:
      - alysia-network

  pgsqldb:
    container_name: alysia-db
    image: postgres
    restart: always
    shm_size: 128MB
    ports:
      - '${DB_PORT}:5432'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alysia-network

  adminer:
    container_name: alysia-adminer
    image: adminer
    restart: always
    ports:
      - '8080:8080'
    environment:
      - ADMINER_DEFAULT_SERVER=pgsqldb
    depends_on:
      - pgsqldb
    volumes:
      - ./scripts/docker/docker-adminer.css:/var/www/html/adminer.css
    networks:
      - alysia-network

volumes:
  postgres_data:

networks:
  alysia-network:
    driver: bridge
