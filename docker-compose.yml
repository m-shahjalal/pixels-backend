services:
  app:
    container_name: alysia-backend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '${APP_PORT}:${APP_PORT}'
    environment:
      - NODE_ENV=development
      - APP_PORT=${APP_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_ACCESS_TOKEN_EXP_IN_SEC=${JWT_ACCESS_TOKEN_EXP_IN_SEC}
      - JWT_REFRESH_TOKEN_EXP_IN_SEC=${JWT_REFRESH_TOKEN_EXP_IN_SEC}
      - JWT_PUBLIC_KEY_BASE64=${JWT_PUBLIC_KEY_BASE64}
      - JWT_PRIVATE_KEY_BASE64=${JWT_PRIVATE_KEY_BASE64}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - DEFAULT_ADMIN_USER_PASSWORD=${DEFAULT_ADMIN_USER_PASSWORD}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - pgsqldb
    command: npm run start:dev

  pgsqldb:
    container_name: alysia-db
    image: postgres:15-alpine
    ports:
      - '${DB_PORT}:5432'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    container_name: alysia-adminer
    image: adminer
    restart: always
    ports:
      - '8080:8080'
    environment:
      - ADMINER_DEFAULT_SERVER=pgsqldb
    depends_on:
      - pgsqldb

volumes:
  postgres_data:
